-- DDL - create , alter , truncate , drop 

create database pwskills;

use pwskills;



create table pwStudents1 (
studentid int,
student_name char(50), 
student_email varchar(100),
joining_date date,
short_desc text,
marks decimal(3,2) -- 000.00
);

select * from pwstudents1;

describe pwstudents1;

drop table pwStudents;

drop database pwskills;

alter table pwstudents1 add weight float;

alter table pwstudents drop column short_desc;

alter table pwstudents modify weight int;

alter table pwstudents rename column weight to mass;

describe pwstudents;

select * from pwstudents;

insert into pwstudents value (1,"deepak suneja", "deepak123@gmail.com", "2023-11-11", 8.4 ,67);

select * from pwstudents;

truncate pwstudents;

select * from insurance_data;

truncate insurance_data;

drop table insurance_data;



use pwskills;

-- create table tablename (
-- columnname1 datatype constraint,
-- columnname2 datatype constraint,
-- columnname3 datatype constraint
-- )

drop table pwStudents1;

create table teachers(
t_id int,
t_name char(50),
primary key (t_id)
);
use pwskills;

create table pwStudents1 (
studentid int ,
student_name char(50) not null, 
student_email varchar(100) unique,
joining_date date default('2023-11-05'),
short_desc text,
marks decimal(3,2), -- 0.00
teacher_id int,
primary key (studentid),
foreign key (teacher_id) references teachers(t_id)
);


alter table tablename add foreign key (teacher_id) references teachers(t_id);
describe pwStudents1;

-- DML - insert , update , delete

-- insert into tablename(column names) value ();

insert into teachers value (6, 'sudhanshu');

insert into teachers (t_id) value (3);

insert into teachers values (4, "Ekta"),(5, 'Krish');

select * from teachers;

-- update my teachers table and set t_name value as nitin where t_id is equal to 2
update teachers set t_name = "nitin" where t_id = 2;

-- delete values from the teachers table whereever you find t_id as 3
delete from teachers where t_id = 3 ;

-- DQL - select 
show databases;

show tables;

select * from teachers;

select t_id from teachers;

-- operations - from , join , where , group by , having , select , order by , limit

use pwskills;


-- operators -

use mavenmovies;

-- Arithmatic operator -- + - * / %

select * from payment;

select amount, amount * amount as doubled_amount from payment;

select amount from payment where amount = 2*amount/2;

-- comparsion operator - < > = <> <= >=

select * from film;

select * from film where replacement_cost >= 20;

select * from film where rating <> 'PG';


-- logical operator -- and , or , not , in , between

select * from film where not rating != 'PG';

select * from film where length in (80 , 90 , 100);

-- constraints - set of rules 
-- not null , default , unique, check, primary key , foregin key , candidate key , super key , 
-- composite key  , artifical key

describe film;

create table pwStudents1 (
-- addharcard + last_nam of student 
student_name char(50) not null, 
adhaar_card int , -- candidate key
student_email varchar(100) unique,
joining_date date default('2023-11-05'),
age int check(age>=18),
short_desc text,
marks decimal(10,2), -- 00000000.00
teacher_id int,
primary key (studentid),
foreign key (teacher_id) references teachers(t_id)
);

-- Retrieve the titles of films that have a rental rate greater than $4.00.
select title , rental_rate from film where rental_rate > 4;

-- List the customer names and emails of those who live in the address with the ID 300.
select first_name , last_name , email , address_id from customer where address_id = 300;

-- Find the films with a length between 120 and 150 minutes (inclusive). Display the title and length.
select title , length from film where length between 120 and 150;

-- wildcard operator - like - _ % - text data

-- Retrieve the first and last names of customers whose last name contains with the letter 'S' .
select first_name , last_name from customer where last_name like "S%";
select first_name , last_name from customer where last_name like "%S";
select first_name , last_name from customer where last_name like "%S%";
select first_name , last_name from customer where last_name like "S%S";
select first_name , last_name from customer where last_name like "%es%";

-- Retrieve the first and lastname of customer whose first name should end with e and start with a?
select first_name , last_name from customer where first_name like "a%e";

-- Retrieve the first and lastname of customer whose first name where letter a is on second position?
select first_name , last_name from customer where first_name like "_a%";

-- Retrieve the first and lastname of customer whose first name have letter a is on second position and
-- e on 4th position?
select first_name , last_name from customer where first_name like "_a_e%";

-- Retrieve the first and lastname of customer whose first name have letter a is on second position and
-- last name have letter e on 4th position?
select first_name , last_name from customer where first_name like "_a%" and last_name like "___e%";

select * from address;

select concat(district, address) from address;


-- SQL pre defined functions mathematical/aggregate functions, strings, datetime

select sum(amount) from payment; -- summing all the column values and giving single output
select avg(amount) from payment; -- averaging all the column values and giving single output
select count(*) from payment; -- counting all the values in column
select min(amount) from payment; -- minimum
select max(amount) from payment; -- maximum
 
select concat(first_name, " " , last_name) as full_name from actor;-- concat to join multiple strings together
select concat(first_name, " " , last_name) as full_name, 
length(concat(first_name,  last_name)) as length from actor; -- length to find number of char in text
select lower(first_name) from actor; -- upper , lower to convert text into upper or lower case letters
select upper("SaHiL");
select substr(address, 3, 10) from address; -- substr( text data, starting point, no. of char)
-- its a function to extract/slice text data
select substr("Sahil Garg", 3,5);

-- datetime functions - month, year, day , monthname , datediff
select rental_date, day(rental_date) from rental;
select return_date, rental_date, datediff(return_date, rental_date) from rental; -- datediff is used to find difference between dates

-- What smallest rental duration ?
select min(rental_duration) from film;
-- What is the highest replacement cost amongst all the films
select max(replacement_cost) from film;
-- Display all films whose title length is greater than 10 characters
select title, length(title) from film where length(title) > 10;
-- Provide the count of unique ratings of films provided
select count(distinct(rating)) from film;
-- Display the list of first 4 cities which start and end with ‘a’
select * from city where city like "a%a" limit 4;

-- operations - from , join , where , group by , having , select , order by , limit

-- Group by
select * from film;
select rating , sum(rental_duration) from film group by rating;

select rating, avg(rental_duration) from film where rating = 'PG';

select actor_id , count(film_id) as num_of_films from film_actor group by actor_id order by num_of_films desc;


-- List the total sales amount for each customer in the database
select * from payment;

SELECT 
    customer_id, SUM(amount) AS total_amount
FROM
    payment
WHERE
    staff_id = 2
GROUP BY customer_id
HAVING total_amount > 100;


-- Joins - inner join , left join , right join and full join
-- T1					t2
-- stid name age      stid tid subject
-- 1	abc		12		2	3	maths
-- 2	bdc		23		4	3	maths	
-- 3	ojn		25		5	4	science
-- 4	ljn		26

-- right join - stid
-- stid name age      stid tid subject
-- 2	bdc		23		2	3	maths
-- 4	ljn		26		4	3	maths	
-- nul	nul	nul			5	4	science
-- 

select * from actor;
select * from actor_award;
select * from actor inner join actor_award on actor.actor_id = actor_award.actor_id;

-- Display all the cities with there postal code in India ?

select * from country; -- country data
select * from city; -- city data
select * from address; -- postal codes 
SELECT 
    postal_code, city, country
FROM
    address
        INNER JOIN
    city ON address.city_id = city.city_id
        INNER JOIN
    country ON city.country_id = country.country_id
WHERE
    country = 'India';
    
-- Display the names of actors and the names of the films they have acted in.
select * from actor; -- names of actor
select * from film_actor; -- common connection
select * from film; -- title

SELECT 
    concat(a.first_name, " ", a.last_name) as Name, title
FROM
    actor a
        INNER JOIN
    film_actor ON a.actor_id = film_actor.actor_id
        INNER JOIN
    film ON film.film_id = film_actor.film_id;

-- Display all the actors and total number of films they have acted in.

SELECT 
    concat(first_name, " ", last_name) as Name, count(title) as count_of_movies
FROM
    actor
        left JOIN
    film_actor ON actor.actor_id = film_actor.actor_id
        left JOIN
    film ON film.film_id = film_actor.film_id
group by Name
order by count_of_movies;



-- Subquery -- non-correlated subqueries 
select avg(amount) from payment;

select payment_id , amount from payment where amount > (select avg(amount) from payment) ;

select * from film;

select * from language;

select film_id , title from film where language_id in (select language_id from language where name like "%e%");

select film_id , title ,  language.language_id from film inner join language on film.language_id = language.language_id where name like "%e%";

-- Find the films that have a higher rental rate than any film in the 'Action' genre. 
-- Display the title and rental rate.
select * from film; -- title , rental_rate

select name from category;

select film_id from film_category where category_id = (select category_id from category where name = 'Action');

select max(rental_rate) from film where film_id in (select film_id from film_category 
where category_id = (select category_id from category where name = 'comedy'));

select title, rental_rate from film where rental_rate > (
select max(rental_rate) from film where film_id in (select film_id from film_category 
where category_id = (select category_id from category where name = 'Action')));

-- Retrieve the films that have a replacement cost higher than the average replacement cost 
-- of films in the 'Drama' genre. Display the title and replacement cost.

select * from film; -- title and replacement cost

select category_id from category where name = 'Drama';

select film_id from film_category where category_id = (select category_id from category where name = 'Drama');

select avg(replacement_cost) from film where film_id in 
(select film_id from film_category where category_id = (select category_id from category where name = 'Drama'));

select title , replacement_cost  from film where replacement_cost>(
select avg(replacement_cost) from film where film_id in (select film_id from film_category 
where category_id =(select category_id from category where name ='Drama')));

-- Retrieve the titles of films that have a rental duration greater than the average rental duration of all films.

select avg(rental_duration) from film;

select title from film where rental_duration > (select avg(rental_duration) from film) order by rental_duration desc;

-- List the names of actors who have not appeared in any films. Display the actor's first name and last name.
select first_name , last_name from actor where actor_id not in (select actor_id from film_actor);

-- List the first and last names of customers who have made payments.
select first_name , last_name from customer where customer_id in ( select distinct customer_id from payment);

-- Find the titles of films that are available in the inventory.
select title from film where film_id in (select distinct film_id from inventory);

select first_name , last_name from actor where actor_id in (select actor_id from film_actor 
where film_id = ( select film_id from film where title = "ACADEMY DINOSAUR")); -- movie name is not availale 

describe actor;

-- correlated related queries 

-- Retrieve the titles of films that have a rental rate higher than the average rental rate of films released in the same year.
select title from film f where rental_rate > (select avg(rental_rate) from film where release_year = f.release_year );

-- List customers who have made more than five payments. Display their first name and last name.
select customer_id , count(*) from payment group by customer_id having count(*) > 5;

SELECT 
    first_name, last_name
FROM
    customer
WHERE
    (SELECT 
            COUNT(*)
        FROM
            payment
        WHERE
            payment.customer_id = customer.customer_id) > 5;

SELECT 
    first_name, last_name, COUNT(*)
FROM
    customer
        JOIN
    payment ON customer.customer_id = payment.customer_id
GROUP BY first_name , last_name
HAVING COUNT(*) > 5; 

-- Find films with a rental rate higher than the average rental rate for all films. Display the title and rental rate.

select title, rental_rate from film where rental_rate > (select avg(rental_rate) from film);

-- Retrieve the names of actors who have appeared in at least two films. Display their first name and last name.

select actor_id , count(film_id) from film_actor group by actor_id having count(film_id)  > 2;

select first_name , last_name from actor a where (select count(film_id) from film_actor fa where fa.actor_id = a.actor_id) >= 2;

-- Write a query to count the number of film rentals for each customer and
-- the containing query then retrieves those customers name who have rented exactly 30 films.

select first_name , last_name from customer where (select count(rental_id) from rental where rental.customer_id = customer.customer_id) = 30;

-- Write a query to find all customers whose total payments for all film rentals are between 100 and 150 dollars.
select first_name , last_name from customer c where (select sum(amount) from payment p where c.customer_id = p.customer_id) between 100 and 150;


select customer_id , count(customer_id) as tot_rentals , sum(amount) as tot_payments
 from payment group by customer_id;

-- Write a query to generate a list of customer IDs along with the number of film rentals and the total payments.
select c.first_name, c.last_name , tot_rentals , tot_payments from customer c inner join 
( select customer_id , count(customer_id) as tot_rentals , sum(amount) as tot_payments
 from payment group by customer_id) a 
 on c.customer_id = a.customer_id;
 
 
 use mavenmovies;
 -- inner join
 
 select count(*) from film;
 select count(*) from film_actor;
 select count(*) from film as f inner join film_actor as fa on f.film_id = fa.film_id inner join actor as a on 
 a.actor_id = fa.actor_id;
 
 -- left join 
 select * from film as f left join film_actor as fa on f.film_id = fa.film_id ;
 
 -- right join
 select count(*) from film as f right join film_actor as fa on f.film_id = fa.film_id;

-- cross join
 select * from film cross join film_actor;
 
 -- full outer join
 -- select count(*) from film as f full outer join film_actor as fa on f.film_id = fa.film_id; 
 select * from film as f left join film_actor as fa on f.film_id = fa.film_id union
select * from film as f right join film_actor as fa on f.film_id = fa.film_id;

-- natural join
select * from film natural join film_category;

-- non - correlated query
select * from payment;
-- give me the customer id who is spending more than average
select avg(amount) from payment;
select distinct customer_id from payment where amount > 4.2;

select distinct customer_id from payment where amount > (select avg(amount) from payment);
 
 
-- retieve the film title , desc, and release year for the film that has the longest duration
select * from film;
select title , description , release_year from film where length = (select max(length) from film);


-- scaler subquery
-- show the title , rental_rate and diff from average renatl rate for each film
select title , rental_rate , rental_rate - (select avg(rental_rate) from film) as average_rental_diff from film;

-- multirow subquery
-- Write a query to generate a list of customer IDs along with the number of film rentals and the total payments.
select c.first_name, c.last_name , tot_rentals , tot_payments from customer c inner join 
( select customer_id , count(customer_id) as tot_rentals , sum(amount) as tot_payments
 from payment group by customer_id) a 
 on c.customer_id = a.customer_id;
 
 ( select customer_id , count(customer_id) as tot_rentals , sum(amount) as tot_payments
 from payment group by customer_id);
 
 
 -- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2)
 select * from customer; -- name 
 select * from inventory; -- store_id
 select * from rental; -- customer_id
 
 select * from customer as c  inner join rental as r  on c.customer_id = r.customer_id
 inner join inventory as i on r.inventory_id = i.inventory_id ;

SELECT 
    c.customer_id, c.first_name, c.last_name
FROM
    customer c
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    store s ON i.store_id = s.store_id
WHERE
    s.store_id IN (1 , 2)
GROUP BY c.customer_id , c.first_name , c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;

 
--  Create a CTE with two named subqueries. The first one gets the actors with last names starting with s.
--  The second one gets all the pg films acted by them. Finally show the film id and title.

-- subquery 1
select * from actor where last_name like "s%" ;-- saving the result in variable - actor_s

-- sub query 2
select a.actor_id , a.first_name , a.last_name , f.title , f.film_id from actor as a inner join film_actor as fa on a.actor_id = fa.actor_id
inner join film as f on f.film_id = fa.film_id where rating = 'pg'; -- actor_pg

with actor_s as (
select * from actor where last_name like "s%"),
actor_pg as (
select a.actor_id , a.first_name , a.last_name , f.title , f.film_id from actor_s as a inner join film_actor as fa on a.actor_id = fa.actor_id
inner join film as f on f.film_id = fa.film_id where rating = 'pg')
select film_id , title from actor_pg;

-- Add one more subquery to the previous CTE to get the revenues of those movies
with actor_s as (
select * from actor where last_name like "s%"), -- task 1 - filter people with last name as 's'
actor_pg as (
select a.actor_id , a.first_name , a.last_name , f.title , f.film_id from actor_s as a inner join film_actor as fa on a.actor_id = fa.actor_id
inner join film as f on f.film_id = fa.film_id where rating = 'pg'), -- task 2 - filter film with rating as 'pg'
film_revenue as (
select ap.film_id , ap.title , p.amount from actor_pg as ap inner join inventory as i on ap.film_id = i.film_id inner join
rental as r on r.inventory_id = i.inventory_id inner join payment as p on p.rental_id = r.rental_id
) -- task 3 - join amount of filter films 
select title , sum(amount) from film_revenue group by title; -- task 4 - total reveniue of each movie

-- Question 1 - Give me the details of films along with its revenue having pg rating and actor with last name as s ?
-- number of tables - actor , film_actor , film, inventory , rental , payment

-- Write a query to generate a value for the activity_type column which returns the string “Active” or “Inactive”
--  depending on the value of the customer.active column
select * from customer;
select first_name , last_name , 
case
when active = 1 then 'active'
else 'inactive' 
end as activity_type
from customer;

-- Write a query to show the number of film rentals for May, June and July of 2005 in a single row.
select monthname(rental_date)as month_name , count(rental_id) from rental group by month_name;

select * from rental;

select sum(case when monthname(rental_date) = 'May' then 1 else 0 end) as may,
sum(case when monthname(rental_date) = 'June' then 1 else 0 end) as june ,
sum(case when monthname(rental_date) = 'July' then 1 else 0 end) as July  from rental;

-- Write a query to categorize films based on the inventory level. 
-- If the count of copies is 0 then ‘Out of stock’
-- If the count of copies is 1 or 2  then ‘Scarce’
-- If the count of copies is 3 or 4 then ‘Available’
-- If the count of copies is >= 5 then ‘Common’

select title ,
case
(select  count(*) from inventory where inventory.film_id = film.film_id )
when 0 then 'out of stock'
when 1 then 'Scares'
when 2 then 'Scares'
when 3 then 'Available'
when 4 then 'Available'
else 'common' end film_availabiliy 
from film;

--  Write a query to create a single row containing the number of films based on the ratings (G, PG and NC17)

SELECT 
    SUM(CASE WHEN rating = 'G' THEN 1 ELSE 0 END) AS G_count,
    SUM(CASE WHEN rating = 'PG' THEN 1 ELSE 0 END) AS PG_count,
    SUM(CASE WHEN rating = 'NC-17' THEN 1 ELSE 0 END) AS NC17_count
FROM film;

select distinct rating from film ;

--

select customer_id from customer where customer_id in (select customer_id from rental group by customer_id 
having count(rental_id) > ( select avg(num_rentals) from (select customer_id , count( rental_id) as num_rentals from rental group by 
customer_id ) as rental_counts
));

with rental_count as (
select customer_id , count( rental_id) as num_rentals from rental group by  customer_id),
avg_value as (
select avg(num_rentals) from rental_count),
filter_custemer as
( select * from rental_count where num_rentals > (select * from avg_value))
select * from filter_custemer;


describe film_actor;
select count(*) from film_actor;


-- Write a query to count the number of film rentals for each customer 
-- and the containing query then retrieves those customers who have rented exactly 30 films.

-- customer , rental

select * from customer;
select * from rental;

select first_name , last_name from customer where (select count(*) from rental where rental.customer_id = customer.customer_id) = 30;


-- Write a query to find all customers whose total payments for all film rentals are between 100 and 150 dollars.
-- customer , payment


-- retieve the film title along with their description and lengths that have rental rate greater than avg rental_rate f films
-- released in same year

select title , description ,length from film as f where rental_rate > (
select avg(rental_rate) from film where release_year = f.release_year);

select first_name , last_anme from customer where customer_id in ( select customer_id from rental group by customer_id having count(rental_id)
> (select avg(rental_count) from (select count(rental_id) as rental_count from rental group by customer_id) as avg_rentals));

select customer_id , count(rental_id) as film_count from rental group by customer_id having count(rental_id) >= 5; 

with agr_film_actor as (
 select title , count(fa.actor_id) as count_of_actor from film_actor fa inner join film f on f.film_id = fa.film_id group by f.title
 )
 select title , count_of_actor ,
 case
 when count_of_actor > 5 then "big star cas"  else "small start cast" end as star_cast from agr_film_actor;
 
 
 
with recursive even_no (n) as (
select 10 --  anchor
union all
select n+2 from even_no where n < 20 -- recursive
)
select * from even_no;

with recursive odd_no (n) as (
select 6 --  anchor
union all
select 2*n+1 from odd_no where n < 25 -- recursive
)
select * from odd_no;
 
 
 CREATE TABLE emp (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    manager_id INT,
    FOREIGN KEY (manager_id) REFERENCES emp(emp_id)
);

INSERT INTO emp (emp_id, emp_name, manager_id) VALUES
    (1, 'John Doe', NULL), -- Top-level employee
    (2, 'Alice Smith', 1), -- Employee managed by John Doe
    (3, 'Bob Johnson', 1), -- Employee managed by John Doe
    (4, 'Charlie Brown', 2), -- Employee managed by Alice Smith
    (5, 'Diana Williams', 2), -- Employee managed by Alice Smith
    (6, 'Eva Garcia', 3), -- Employee managed by Bob Johnson
    (7, 'Franklin Wang', 3); -- Employee managed by Bob Johnson

with recursive emp_hirarchy as (
select emp_id , emp_name , manager_id , 0 as level from emp where manager_id is null
union all 
select e.emp_id , e.emp_name , e.manager_id , eh.level+1 from emp as e join emp_hirarchy as eh on e.manager_id = eh.emp_id)
select emp_id , emp_name , manager_id , level from emp_hirarchy;


-- calculate the average rental duration for films and display both the individual average duration
-- for each film and the overall average duration.
select * from film;
select film_id , rating, title , rental_duration , avg(rental_duration) over() ,
avg(rental_duration) over (partition by rating)
from film;

-- assign the ranks based on ratings alog with rental_durations
select rating, rental_duration ,
rank() over (partition by rating order by rental_duration) as rankings
from film;

-- Retrieve the top 5 films with the highest rental rates, displaying the film title, rental rate, and the average rental
-- rate for all films. Use window functions to rank the films based on their rental rates.

select title, rental_rate,
avg(rental_rate) over(),
rank() over(order by rental_rate asc)
from film 
order by rental_rate desc
limit 5;

-- Find the total number of rentals for each customer, along with their  -- 3:27 - 3:32
-- individual rental counts and the average number of rentals across all customers. -- rental == customer_id , count(rental) , avg(count())
-- add new column with individual having higher value than avg is marked higher or else lower
-- give me the list of people who rented movies higher than average -- 3:36 - 3:40
select customer_id , count(rental_id) as total_count, avg(count(rental_id)) over() as avg_count,
 case when count(rental_id) - avg(count(rental_id)) over() > 0 then "higher" else "lower"  end count_stats
from rental group by customer_id order by count_stats;

-- Find the films that have been rented the least number of times. Display the film 
-- title, rental count, and the average rental count across all films.
-- from - join - where - group by - having - select - order by - limit
select title , count(rental_id) as no_of_rental, avg(count(rental_id)) over() from
film f left join inventory i on f.film_id = i.film_id
left join rental r on r.inventory_id = i.inventory_id group by title order by no_of_rental;

-- Display the title and rental duration of films from the database, 
-- alongside the title and rental duration of the subsequent film (using LEAD function) 

select title , rental_duration , lag(title, 7) over(order by rental_duration),
lag(rental_duration, 2) over(order by rental_duration)  from film;

-- lag -- when you want to compare performance on weekly bases 


-- function - string , numeric , date function , aggregate , window functions

select concat(first_name , " " , last_name) from actor;


-- user defined functions
-- create a function to get a squared value


 
-- SET GLOBAL log_bin_trust_function_creators = 1;
-- delimiter //

-- create function squared (num int)
-- returns int
-- begin
-- declare result int;
-- set result = num*num;
-- return result;
-- end //

-- delimiter ;

select squared(5);

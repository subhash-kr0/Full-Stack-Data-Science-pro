DAY 1

-- DDL - create , alter , truncate , drop 

create database pwskills;

use pwskills;



create table pwStudents1 (
studentid int,
student_name char(50), 
student_email varchar(100),
joining_date date,
short_desc text,
marks decimal(3,2) -- 000.00
);

select * from pwstudents;

describe pwstudents;

drop table pwStudents;

drop database pwskills;

alter table pwstudents1 add weight float;

alter table pwstudents drop column short_desc;

alter table pwstudents modify weight int;

alter table pwstudents rename column weight to mass;

describe pwstudents;

select * from pwstudents;

insert into pwstudents value (1,"deepak suneja", "deepak123@gmail.com", "2023-11-11", 8.4 ,67);

select * from pwstudents;

truncate pwstudents;

select * from insurance_data;

truncate insurance_data;

drop table insurance_data;



DAY 2

use pwskills;

-- create table tablename (
-- columnname1 datatype constraint,
-- columnname2 datatype constraint,
-- columnname3 datatype constraint
-- )

drop table pwStudents1;

create table teachers(
t_id int,
t_name char(50),
primary key (t_id)
);

create table pwStudents1 (
studentid int ,
student_name char(50) not null, 
student_email varchar(100) unique,
joining_date date default('2023-11-05'),
short_desc text,
marks decimal(3,2), -- 0.00
teacher_id int,
primary key (studentid),
foreign key (teacher_id) references teachers(t_id)
);

describe pwStudents1;

-- DML - insert , update , delete

-- insert into tablename(column names) value ();

insert into teachers value (6, 'sudhanshu');

insert into teachers (t_id) value (3);

insert into teachers values (4, "Ekta"),(5, 'Krish');

select * from teachers;

-- update my teachers table and set t_name value as nitin where t_id is equal to 2
update teachers set t_name = "nitin" where t_id = 2;

-- delete values from the teachers table whereever you find t_id as 3
delete from teachers where t_id = 3 ;

-- DQL - select 
show databases;

show tables;

select * from teachers;

select t_id from teachers;

-- operations - from , join , where , group by , having , select , order by , limit

use pwskills;

use mavenmovies;

select * from film;

-- operations - from , join , where , group by , having , select , order by , limit

select title , description from film limit 10;

select film_id , title from film order by title desc;

-- comparison operator - < , > , <= , >=, = , !=
select customer_id , first_name from customer where customer_id = 20;

-- logical operator - and or not

select * from payment where amount > 2.99 and customer_id = 100 or staff_id = 1;

-- Arithmatic operator = + - * / 
select 2*2;

select amount, amount*2 from payment;



